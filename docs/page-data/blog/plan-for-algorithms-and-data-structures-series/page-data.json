{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/plan-for-algorithms-and-data-structures-series","webpackCompilationHash":"10a437b15513059d5027","result":{"data":{"mdx":{"frontmatter":{"title":"Plan for Algorithms and Data Structures Series","desc":"This is a rough plan for a series of blog posts capturing my process of learning and brushing up on different data structures and algorithms.","date":"August 18, 2019","category":"Algorithms and Data Structures Series"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Plan for Algorithms and Data Structures Series\",\n  \"desc\": \"This is a rough plan for a series of blog posts capturing my process of learning and brushing up on different data structures and algorithms.\",\n  \"date\": \"2019-08-18T00:00:00.000Z\",\n  \"category\": \"Algorithms and Data Structures Series\",\n  \"tags\": [\"A&DS\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"This is a rough plan for a series of blog posts capturing my process of learning and brushing up on different data structures and algorithms.\"), mdx(\"p\", null, \"I'll be covering all of them from the perspective of a FrontEnd developer. Including implementations in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"JavaScript\"), \" as well as examples of how these \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"data structures and algorithms\"), \" are being used in \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"browsers\"), \" and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"web development\"), \".\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Disclaimer: I'm learning myself, so if you see any silly mistake, hit me up and I'll most definitely fix it!\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(GLink, {\n    to: \"/blog/intro-and-prerequisites-\\u2013-a&ds\",\n    mdxType: \"GLink\"\n  }, \"Intro and Prerequisites\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Data Structures\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Array\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Sorting\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Simple sorts\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Insertion sort\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Selection sort\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Radix sort\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Efficient sorts\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Quicksort\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Merge sort\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Shell sort (?)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Heap sort \", \"[in heap]\"))))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Binary Search\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Shuffling\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Random Sampling\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Backtracking\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Matrix\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Transpose\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Rotate\"))))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Linked List\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Singly Linked List\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Doubly Linked List\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Stack\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Queue\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Heap\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Binary Heap\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Priority Queue\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Heap sort\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Hash table\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Hashing functions\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Collision resolution\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Binary\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"From and to Binary\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Bitwise operations\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"String\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Levenshtein distance\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Knut-Morris-Pratt\")))))), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Trees and Graphs\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Graph Types\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Traversal\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"in-order, post-order, pre-order\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Depth-First Search\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Breadth-First Search\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Path finding\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Breadth-First Search\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Djikstar\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A\", \"*\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Minimum Spanning Tree\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Topological Sorting\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Binary Search Trees\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Binary Search\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Self Balancing BSTs\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Red-Black Tree\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"AVL tree\"))))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Union Find\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Finding Cycles\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Strongly Connected Component\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Bipartite Graphs\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Finding Redundant Connections\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Finding Bridge Connections\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Network Flow\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Suffix tree\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Trie\")))), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Advanced Data Structures\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"CRDTs\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"GeoHash\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Other Algorithms\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Dynamic Programming\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Longest Common Subsequence\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Edit distance\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Knapsack\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Egg dropping puzzle\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Recursion\")))));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"editUrl":"https://github.com/d4rkr00t/sysoev.org/edit/master/blog/algorithms-and-data-structures/plan/index.mdx","slug":"blog/plan-for-algorithms-and-data-structures-series"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"cd8dcc7a-c0a3-58e2-b8c8-582ccac19de9"}}}